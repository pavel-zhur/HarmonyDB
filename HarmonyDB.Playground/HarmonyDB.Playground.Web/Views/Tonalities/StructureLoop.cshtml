@using HarmonyDB.Common.Representations.OneShelf
@using HarmonyDB.Index.Analysis.Tools
@using HarmonyDB.Index.Api.Model.VExternal1
@using HarmonyDB.Index.Api.Model.VExternal1.Tonalities
@using Microsoft.AspNetCore.Mvc.Localization
@using OneShelf.Common
@inject IViewLocalizer ViewLocalizer
@model StructureLoopModel

@{
    LoopResponse response = ViewBag.Response;

    Layout = "_Layout";

    var loop = response.Loop;
    var predicted = loop.Probabilities.GetPredictedTonality();
    var secondPredicted = loop.Probabilities.GetSecondPredictedTonality(out var secondConfidence);
    var parallelToPredicted = predicted.GetParallelScale(false);
    var predictedViewMode = Model.ViewMode == StructureViewMode.Interpreted ? predicted.OnceAsNullable() : null;

    var loopTitle = loop.Normalized.GetTitle(predictedViewMode);
    ViewBag.Title = $"{loopTitle} - {ViewLocalizer["Tonality Analysis"].Value}";
}

<div>
    <h3 class="d-inline-block">@ViewLocalizer["Tonality Analysis"]: @loopTitle</h3>
    @Html.ActionLink($"\ud83d\udd17{ViewLocalizer["Permalink"].Value}", "StructureLoop", Model, new { target = "_blank" })
</div>

<ul>
    <li>
        @if (Model.IncludeTrace)
        {
            @Html.ActionLink(ViewLocalizer["Exclude the Index API trace for developers"].Value, "StructureLoop", Model with { IncludeTrace = false })
        }
        else
        {
            @Html.ActionLink(ViewLocalizer["Include the Index API trace for developers"].Value, "StructureLoop", Model with { IncludeTrace = true })
        }
    </li>
</ul>

<div class="mt-4">
    <h3 class="d-inline-block">@ViewLocalizer["Loop Information"]</h3>
</div>

@await Html.PartialAsync("Structure/StructureViewModeSwitch", Model)

<table class="table table-bordered table-sm w-auto">
    <tbody>
        <tr>
            <td><b>@ViewLocalizer["Progression"]</b></td>
            <td colspan="2">@loopTitle</td>
        </tr>
        <tr>
            <td><b>@ViewLocalizer["Length"]</b></td>
            <td colspan="2">@loop.Length</td>
        </tr>
        <tr>
            <td><b>@ViewLocalizer["Total Songs"]</b></td>
            <td colspan="2">@loop.TotalSongs.ToString("N0")</td>
        </tr>
        <tr>
            <td><b>@ViewLocalizer["Total Occurrences"]</b></td>
            <td colspan="2">@loop.TotalOccurrences.ToString("N2")</td>
        </tr>
        <tr>
            <td><b>@ViewLocalizer["Total Successions"]</b></td>
            <td colspan="2">@loop.TotalSuccessions.ToString("N2")</td>
        </tr>
        <tr>
            <td><b>@ViewLocalizer["Average Coverage"]</b></td>
            <td colspan="2">@loop.AverageCoverage.ToString("P0")</td>
        </tr>
        <tr>
            <td><b>@ViewLocalizer["Detected Tonality"]</b></td>
            <td>
                <b>@predicted.ToLoopTonalityTitle(predictedViewMode)</b>
            </td>
            <td>
                <span>@loop.Probabilities.TonalityConfidence().ToString("P0")</span>
            </td>
        </tr>
        <tr>
            <td><b>@ViewLocalizer["Second Detected Tonality"]</b></td>
            <td>
                <b>@secondPredicted.ToLoopTonalityTitle(predictedViewMode)</b>
            </td>
            <td>
                <span>@secondConfidence.ToString("P0")</span>
            </td>
        </tr>
        <tr>
            <td><b>@ViewLocalizer["Parallel to Detected Tonality (if not second)"]</b></td>
            <td>
                @if (secondPredicted != parallelToPredicted)
                {
                    <b>@parallelToPredicted.ToLoopTonalityTitle(predictedViewMode)</b>
                }
            </td>
            <td>
                @if (secondPredicted != parallelToPredicted)
                {
                    <span>@loop.Probabilities[parallelToPredicted.ToIndex()].ToString("P0")</span>
                }
            </td>
        </tr>
        <tr>
            <td><b>@ViewLocalizer["Tonic Confidence"]</b></td>
            <td colspan="2">@loop.Probabilities.TonicConfidence(false).ToString("P0")</td>
        </tr>
        <tr>
            <td><b>@ViewLocalizer["Tonic Score"]</b></td>
            <td colspan="2">@loop.TonicScore.ToString("P0")</td>
        </tr>
        <tr>
            <td><b>@ViewLocalizer["Scale Score"]</b></td>
            <td colspan="2">@loop.ScaleScore.ToString("P0")</td>
        </tr>
    </tbody>
</table>

<div class="mt-4">
    <h3 class="d-inline-block">@ViewLocalizer["Detected Tonality Probabilities"]</h3>
</div>

<table class="table table-bordered table-sm table-fixed w-auto">
    <thead>
        <tr class="fw-bold">
            <td colspan="2">@ViewLocalizer["Major"]</td>
            <td colspan="2">@ViewLocalizer["Minor"]</td>
            <td>@ViewLocalizer["Scale Agnostic"]</td>
        </tr>
    </thead>
    <tbody>
        @foreach (var note in TonalitiesExtensions.GetLoopTonalityShiftsDisplayOrder(predictedViewMode))
    {
        <tr>
            @{
                float sum = 0;
                foreach (var isMinor in new[] { false, true, })
                {
                    var adjustedNote = Note.Normalize(note + (isMinor ? 3 : 0));
                    var probability = loop.Probabilities[(adjustedNote, isMinor).ToIndex()];
                    sum += probability;
                        <td class="fw-bold">@((adjustedNote, isMinor).ToLoopTonalityTitle(predictedViewMode))</td>
                    <td>@probability.ToString("P0")</td>
                }
                <td>@sum.ToString("P0")</td>
            }
        </tr>
    }
    </tbody>
</table>

<div class="mt-4">
    <h3 class="d-inline-block" id="statistics">@ViewLocalizer["Link Statistics"]</h3>
</div>

<p>
    @ViewLocalizer["The following table is not the primary source for loop tonality data; it highlights the most significant aspects. Each song in the 'Derived From = Predicted' group has 23 other probable tonalities with probabilities greater than 0. Refer to the 'Average Confidence' column for more details. These probabilities affect the results in a dispersed manner. Therefore, this table focuses on the key subset for each group. Displaying the aggregated source numbers would be mathematically accurate but less convenient for analysis."]
</p>

<table class="table table-bordered table-sm">
    <thead>
    <tr class="fw-bold">
        <td>@ViewLocalizer["Derived Tonality"]</td>
        <td>@ViewLocalizer["Derived From"]</td>
        <td>@ViewLocalizer["Total Songs"]</td>
        <td>@ViewLocalizer["Total Weight"]</td>
        <td>@ViewLocalizer["Total Occurrences"]</td>
        <td>@ViewLocalizer["Total Successions"]</td>
        <td>@ViewLocalizer["Average Coverage"]</td>
        <td>@ViewLocalizer["Average Confidence"]</td>
        <td>@ViewLocalizer["Average Tonic Score"]</td>
        <td>@ViewLocalizer["Average Scale Score"]</td>
        <td>@ViewLocalizer["Random Examples"]</td>
    </tr>
    </thead>
    <tbody>
    @foreach (var (link, i) in response.LinkStatistics.OrderByDescending(x => x.TotalWeight).WithIndices())
    {
        <tr>
            <td>@link.DerivedTonalityIndex.ToLoopTonalityTitle(predictedViewMode)</td>
            <td>@(link.DerivedFromKnown ? ViewLocalizer["Known"] : ViewLocalizer["Predicted"])</td>
            <td>@link.Count.ToString("N0")</td>
            <td>@link.TotalWeight.ToString("N0")</td>
            <td>@link.Occurrences.ToString("N2")</td>
            <td>@link.Successions.ToString("N2")</td>
            <td>@link.AverageCoverage.ToString("P0")</td>
            <td>@link.AverageConfidence.ToString("P0")</td>
            <td>@link.AverageTonicScore.ToString("P0")</td>
            <td>@link.AverageScaleScore.ToString("P0")</td>
            <td>
                @if (link.Examples.Any())
                {
                    <a href="#examples-@i" class="btn btn-xs btn-outline-secondary ms-2">↓ @ViewLocalizer["Show"]</a>
                }
            </td>
        </tr>
    }
    </tbody>
</table>

<div class="mt-4">
    <h3 class="d-inline-block">@ViewLocalizer["Song Examples"]</h3>
</div>

@foreach (var (link, i) in response.LinkStatistics.OrderByDescending(x => x.TotalWeight).WithIndices().Where(x => x.x.Examples.Any()))
{
    <div class="mt-4 mb-2">
        <h5 class="d-inline-block" id="examples-@i">@link.DerivedTonalityIndex.ToLoopTonalityTitle(predictedViewMode) @(link.DerivedFromKnown ? ViewLocalizer["Known"] : ViewLocalizer["Predicted"]) Examples</h5>
        <a href="#statistics" class="btn btn-xs btn-outline-secondary ms-2 mb-1">↑ @ViewLocalizer["Back to Statistics"]</a>
    </div>

    <table class="table table-bordered table-sm">
        <thead>
            <tr class="fw-bold">
                <td>@ViewLocalizer["Song"]</td>
                <td>@ViewLocalizer["Source"]</td>
                <td>@ViewLocalizer["Occurrences"]</td>
                <td>@ViewLocalizer["Successions"]</td>
                <td>@ViewLocalizer["Coverage"]</td>
                <td>@ViewLocalizer["Rating"]</td>
                <td>@ViewLocalizer["Total Loops"]</td>
                <td>@ViewLocalizer["Tonality Confidence"]</td>
                <td>@ViewLocalizer["Tonic Confidence"]</td>
                <td>@ViewLocalizer["Tonic Score"]</td>
                <td>@ViewLocalizer["Scale Score"]</td>
            </tr>
        </thead>
        @foreach (var example in link.Examples)
        {
            <tr>
                <td>
                    @string.Join(", ", example.Song.IndexHeader.Artists ?? Enumerable.Empty<string>()) – @Html.ActionLink(example.Song.IndexHeader.Title, "StructureSong", new StructureSongModel
                        {
                            ExternalId = example.Song.IndexHeader.ExternalId
                        })
                </td>
                <td>@example.Song.IndexHeader.Source</td>
                <td>@example.Link.Occurrences.ToString("N2")</td>
                <td>@example.Link.Successions.ToString("N2")</td>
                <td>@example.Link.Coverage.ToString("P0")</td>
                <td>@((int)(example.Song.IndexHeader.Rating ?? 0))%</td>
                <td>@example.Song.TotalLoops.ToString("N0")</td>
                <td>@example.Song.Probabilities.TonalityConfidence().ToString("P0")</td>
                <td>@example.Song.Probabilities.TonicConfidence(true).ToString("P0")</td>
                <td>@example.Song.ScaleScore.ToString("P0")</td>
                <td>@example.Song.TonicScore.ToString("P0")</td>
            </tr>
        }
    </table>
}

@if (Model.IncludeTrace)
{
    @await Html.PartialAsync("Trace")
}
