@using HarmonyDB.Index.Analysis.Tools
@using HarmonyDB.Index.Api.Model.VExternal1
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer ViewLocalizer
@model StructureSongsModel

@{
    StructureSongsResponse? response = ViewBag.Response;

    ViewBag.Title = $"{(response == null ? null : $"{response.Total} {ViewLocalizer["found"].Value} - ")}{ViewLocalizer["Songs Tonalities"].Value}";
    Layout = "_Layout";
}

<div>
    <h3 class="d-inline-block">@ViewLocalizer["See the songs tonality analysis"]</h3>
    @Html.ActionLink($"\ud83d\udd17{ViewLocalizer["Permalink"].Value}", "StructureSongs", "Home", Model with
    {
        JustForm = true,
    }, new { target = "_blank" })
</div>

@using (Html.BeginForm("StructureSongs", "Home", Model, FormMethod.Get))
{
    <p>
        @ViewLocalizer["Ordering"]:
        @Html.DropDownListFor(x => x.Ordering, Enum.GetValues<StructureSongsRequestOrdering>().Select(x => new SelectListItem(x.ToString(), x.ToString())))
    </p>
    <p>
        @ViewLocalizer["Min rating"]: @Html.TextBoxFor(x => x.MinRating)
    </p>
    <p>
        @ViewLocalizer["Min total loops"]: @Html.TextBoxFor(x => x.MinTotalLoops)
    </p>
    <p>
        @ViewLocalizer["Max total loops"]: @Html.TextBoxFor(x => x.MaxTotalLoops)
    </p>
    <p>
        @ViewLocalizer["Min tonality confidence"]: @Html.TextBoxFor(x => x.MinTonalityConfidence)
    </p>
    <p>
        @ViewLocalizer["Min tonic confidence"]: @Html.TextBoxFor(x => x.MinTonicConfidence)
    </p>
    <p>
        @ViewLocalizer["Max tonality confidence"]: @Html.TextBoxFor(x => x.MaxTonalityConfidence)
    </p>
    <p>
        @ViewLocalizer["Max tonic confidence"]: @Html.TextBoxFor(x => x.MaxTonicConfidence)
    </p>
    <p>
        @ViewLocalizer["Min tonic score"]: @Html.TextBoxFor(x => x.MinTonicScore)
    </p>
    <p>
        @ViewLocalizer["Min scale score"]: @Html.TextBoxFor(x => x.MinScaleScore)
    </p>
    <p>
        @ViewLocalizer["Second filter"]:
        @Html.DropDownListFor(x => x.SecondFilter, Enum.GetValues<StructureRequestSecondFilter>().Select(x => new SelectListItem(x.ToString(), x.ToString())))
    </p>
    <p>
        @ViewLocalizer["Detected scale filter"]:
        @Html.DropDownListFor(x => x.DetectedScaleFilter, Enum.GetValues<StructureRequestDetectedScaleFilter>().Select(x => new SelectListItem(x.ToString(), x.ToString())))
    </p>
    <p>
        @ViewLocalizer["Correct detection filter"]:
        @Html.DropDownListFor(x => x.CorrectDetectionFilter, Enum.GetValues<StructureSongsRequestCorrectDetectionFilter>().Select(x => new SelectListItem(x.ToString(), x.ToString())))
    </p>
    <p>
        @ViewLocalizer["Known tonality filter"]:
        @Html.DropDownListFor(x => x.KnownTonalityFilter, Enum.GetValues<StructureSongsRequestKnownTonalityFilter>().Select(x => new SelectListItem(x.ToString(), x.ToString())))
    </p>
    <p>
        @ViewLocalizer["Songs Per Page"]: @Html.TextBoxFor(x => x.SongsPerPage)
    </p>
    <p>
        <label>
            @Html.CheckBoxFor(x => x.IncludeTrace)
            @ViewLocalizer["Include the Index API trace for developers"]
        </label>
    </p>
    <input type="submit" value="@ViewLocalizer["List"]" onclick="this.form.submit(); this.disabled=true; this.value='@ViewLocalizer["Querying (takes 5–60 seconds)…"]'; " />
}

@if (response != null)
{
    <div class="mt-4">
        <h3 class="d-inline-block">@ViewLocalizer["Results"]</h3>
        @Html.ActionLink($"\ud83d\udd17{ViewLocalizer["Permalink"].Value}", "StructureSongs", "Home", Model, new { target = "_blank" })
    </div>

    @await Html.PartialAsync("Paging", Model)

    <table>
        <thead>
            <tr class="fw-bold">
                <td>@ViewLocalizer["Song"]</td>
                <td class="ps-2">@ViewLocalizer["Source"]</td>
                <td class="ps-2">@ViewLocalizer["Metadata Tonality"]</td>
                <td class="ps-2">@ViewLocalizer["Rating"]</td>
                <td class="ps-2">@ViewLocalizer["Total Loops"]</td>
                <td class="ps-2">@ViewLocalizer["Tonality Confidence"]</td>
                <td class="ps-2">@ViewLocalizer["Tonic Confidence"]</td>
                <td class="ps-2">@ViewLocalizer["Tonic Score"]</td>
                <td class="ps-2">@ViewLocalizer["Scale Score"]</td>
            </tr>
        </thead>
        @foreach (var song in response.Songs)
        {
            <tr>
                <td>
                    @string.Join(", ", song.IndexHeader.Artists ?? Enumerable.Empty<string>()) – @Html.ActionLink(song.IndexHeader.Title, "StructureSong", "Home", new StructureSongModel
                        {
                            ExternalId = song.IndexHeader.ExternalId
                        })
                </td>
                <td class="pt-1 ps-2">@song.IndexHeader.Source</td>
                <td class="ps-2">@song.IndexHeader.BestTonality?.Tonality</td>
                <td class="ps-2">@((int)(song.IndexHeader.Rating ?? 0))%</td>
                <td class="ps-2">@song.TotalLoops.ToString("N0")</td>
                <td class="ps-2">@song.Probabilities.TonalityConfidence().ToString("P0")</td>
                <td class="ps-2">@song.Probabilities.TonicConfidence().ToString("P0")</td>
                <td class="ps-2">@song.ScaleScore.ToString("P0")</td>
                <td class="ps-2">@song.TonicScore.ToString("P0")</td>
            </tr>
        }
    </table>

    @await Html.PartialAsync("Paging", Model)
}

@await Html.PartialAsync("Trace")
