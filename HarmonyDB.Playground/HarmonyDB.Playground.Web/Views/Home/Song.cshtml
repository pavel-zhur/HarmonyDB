@using System.Reflection
@using System.Text.Json
@using HarmonyDB.Common
@using HarmonyDB.Source.Api.Model.V1
@using OneShelf.Common
@using OneShelf.Common.Songs.Tools
@model SongModel

@{
    Chords chords = ViewBag.Chords;
    var title = $"{string.Join(", ", chords.Artists ?? [])} – {chords.Title}, Harmony DB";

    ViewBag.Title = title;
    Layout = "_Layout";
}

<script src="~/js/Player.js"></script>
@Html.Hidden("parsedChords", JsonSerializer.Serialize(ViewBag.Parsed), null)

<div>
    <h3 class="d-inline-block">@title</h3>
    @Html.ActionLink("\ud83d\udd17Permalink", "Song", Model, new { target = "_blank" })
</div>
<ul>
    @if (Model.Highlight != null)
    {
        <li>
            @Html.ActionLink($"Clear highlighting {Model.Highlight}", "Song", Model with { Highlight = null })
        </li>
    }
    
    <li>
        <span>Transpose: </span>
        @for (var i = -7; i <= 7; i++)
        {
            if (i > -7)
            {
                <span> | </span>
            }
            @if (i == Model.Transpose)
            {
                <span>@i</span>
            }
            else
            {
                @Html.ActionLink(i.Transposition(), "Song", Model with { Transpose = i })
            }
        }
    </li>
    
    <li>
        <span>Preferred alteration: </span>
        @{
            (string title, NoteAlteration? alteration)[] alterations = [("Original", null), ("Flats", NoteAlteration.Flat), ("Sharps", NoteAlteration.Sharp)];
        }
        @foreach (var (alteration, isFirst) in alterations.WithIsFirst())
        {
            if (!isFirst)
            {
                <span> | </span>
            }

            if (alteration.alteration == Model.Alteration)
            {
                <span>@alteration.title</span>
            }
            else
            {
                @Html.ActionLink(alteration.title, "Song", Model with { Alteration = alteration.alteration })
            }
        }
    </li>

    <li>
        @if (Model.IncludeTrace)
        {
            @Html.ActionLink("Exclude the Index API trace for developers", "Song", Model with { IncludeTrace = false })
        }
        else
        {
            @Html.ActionLink("Include the Index API trace for developers", "Song", Model with { IncludeTrace = true })
        }
    </li>
</ul>

<div class="chords-block">
    @Html.Raw(chords.Output.AsHtml(ViewBag.RepresentationSettings))
</div>

@await Html.PartialAsync("Trace")