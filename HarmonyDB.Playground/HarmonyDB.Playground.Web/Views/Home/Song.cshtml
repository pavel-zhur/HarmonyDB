@using System.Reflection
@using System.Text.Json
@using HarmonyDB.Common
@using HarmonyDB.Common.Transposition
@using HarmonyDB.Index.Analysis.Models
@using HarmonyDB.Index.Analysis.Models.Structure
@using HarmonyDB.Index.Analysis.Services
@using HarmonyDB.Index.Analysis.Tools
@using HarmonyDB.Index.Api.Model.VExternal1
@using HarmonyDB.Index.Api.Model.VExternal1.Tonalities
@using HarmonyDB.Playground.Web.Models.Home
@using HarmonyDB.Source.Api.Model.V1
@using OneShelf.Common
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer ViewLocalizer
@inject ProgressionsVisualizer ProgressionsVisualizer
@using HarmonyDB.Playground.Web.Models.Tonalities
@model SongModel

@{
    Chords chords = ViewBag.Chords;
    var title = $"{string.Join(", ", chords.Artists ?? [])} – {chords.Title}";

    ViewBag.Title = title;
    Layout = "_Layout";

    SongResponse? tonality = ViewBag.Tonality;
}

<script src="~/js/Player.js"></script>
@Html.Hidden("parsedChords", JsonSerializer.Serialize(ViewBag.Parsed), null)

<div>
    <h3 class="d-inline-block">@title</h3>
    @Html.ActionLink($"\ud83d\udd17{ViewLocalizer["Permalink"].Value}", "Song", Model, new { target = "_blank" })
</div>
<ul>
    <li>
        <a href="@chords.SourceUri">@ViewLocalizer["Source URL"]: @string.Join(".", chords.SourceUri.Host.Split('.').TakeLast(2))</a>
    </li>

    @if (Model.Highlight != null)
    {
        <li>
            @Html.ActionLink($"{ViewLocalizer["Clear highlighting"].Value} {Model.Highlight}", "Song", Model with { Highlight = null })
        </li>
    }
    
    <li>
        <span>@ViewLocalizer["Metadata tonality"]: </span>
        @if (chords.BestTonality?.TryParseBestTonality() == null)
        {
            <span style="color: darkgray">@ViewLocalizer["unknown"]</span>
        }
        else
        {
            <b>@chords.BestTonality.TryParseBestTonality()!.Value.ToSongTonalityTitle()</b>
        }
    </li>
    
    <li>
        <span>
            @ViewLocalizer["Detected tonality"]
            @await Html.PartialAsync("Badge", BadgeModel.Beta)&nbsp;:
        </span>
        @if (tonality != null)
        {
            <b>@tonality.Song.Probabilities.GetPredictedTonality(out var confidence).ToSongTonalityTitle()</b>
            <span> &ndash; @confidence.ToString("P0"), </span>
            <b>@tonality.Song.Probabilities.GetSecondPredictedTonality(out confidence).ToSongTonalityTitle()</b>
            <span> &ndash; @confidence.ToString("P0"), ...</span>
            <span>
                (@Html.ActionLink(ViewLocalizer["go to analysis"].Value, "Song", "Tonalities", new StructureSongModel { ExternalId = Model.ExternalId, }))
            </span>
        }
        else if (ViewBag.TonalityConcurrencyException == true)
        {
            <span style="color: darkgray">@await Html.PartialAsync("ConcurrencyPartial")</span>
        }
        else
        {
            <span style="color: darkgray">@ViewLocalizer["unknown"]</span>
        }
    </li>

    <li>
        <span>@ViewLocalizer["Transpose"]: </span>
        @for (var i = -7; i <= 7; i++)
        {
            if (i > -7)
            {
                <span> | </span>
            }

            @if (i == Model.Transpose)
            {
                <span>@i</span>
            }
            else
            {
                @Html.ActionLink(i.Transposition(), "Song", Model with { Transpose = i })
            }
        }
    </li>

    <li>
        <span>@ViewLocalizer["Preferred alteration"]: </span>
        @{
            (string title, NoteAlteration? alteration)[] alterations = [("Original", null), ("Flats", NoteAlteration.Flat), ("Sharps", NoteAlteration.Sharp)];
        }
        @foreach (var (alteration, isFirst) in alterations.WithIsFirst())
        {
            if (!isFirst)
            {
                <span> | </span>
            }

            if (alteration.alteration == Model.Alteration)
            {
                <span>@ViewLocalizer[alteration.title]</span>
            }
            else
            {
                @Html.ActionLink(ViewLocalizer[alteration.title].Value, "Song", Model with { Alteration = alteration.alteration })
            }
        }
    </li>

    <li>
        @using (Html.BeginForm("Song", "Home", Model, FormMethod.Get))
        {
            @Html.HiddenFor(x => x.Alteration)
            @Html.HiddenFor(x => x.Highlight)
            @Html.HiddenFor(x => x.Transpose)
            @Html.HiddenFor(x => x.ExternalId)
            @Html.HiddenFor(x => x.IncludeTrace)
            <span>@ViewLocalizer["Show complex chords"]: </span>
            <label>
                @Html.CheckBoxFor(x => x.Show7)
                <span> 7</span>
            </label>
            <label>
                @Html.CheckBoxFor(x => x.ShowSus)
                <span> sus</span>
            </label>
            <label>
                @Html.CheckBoxFor(x => x.ShowBass)
                <span> @ViewLocalizer["bass"]</span>
            </label>
            <label>
                @Html.CheckBoxFor(x => x.Show6)
                <span> 6</span>
            </label>
            <label>
                @Html.CheckBoxFor(x => x.Show9)
                <span> 9, 11, 13</span>
            </label>
            <input type="submit" value="@ViewLocalizer["Apply"]"/>
        }
    </li>

    <li>
        @if (Model.IncludeTrace)
        {
            @Html.ActionLink(ViewLocalizer["Exclude the Index API trace for developers"].Value, "Song", Model with { IncludeTrace = false })
        }
        else
        {
            @Html.ActionLink(ViewLocalizer["Include the Index API trace for developers"].Value, "Song", Model with { IncludeTrace = true })
        }
    </li>
</ul>

<h3 class="mt-3">@ViewLocalizer["Chords"]</h3>
<div class="chords-block">
    @Html.Raw(chords.Output.AsHtml(ViewBag.RepresentationSettings))
</div>

@await Html.PartialAsync("Trace")