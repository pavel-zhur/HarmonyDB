@using HarmonyDB.Common.FullTextSearch
@using HarmonyDB.Index.Api.Model.VExternal1
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer ViewLocalizer
@model SongsByHeaderModel

@{
    SongsByHeaderResponse? response = ViewBag.Response;

    ViewBag.Title = $"{(response == null ? null : $"{response.Total} {ViewLocalizer["found"].Value} - ")}{ViewLocalizer["Songs By Title"].Value}";
    Layout = "_Layout";
}

<div>
    <h3 class="d-inline-block">@ViewLocalizer["Search songs by title and artists"]</h3>
    @Html.ActionLink($"\ud83d\udd17{ViewLocalizer["Permalink"].Value}", "SongsByHeader", "Home", Model with
    {
        JustForm = true,
}, new { target = "_blank" })
</div>

@using (Html.BeginForm("SongsByHeader", "Home", Model, FormMethod.Get))
{
    <p>
        @ViewLocalizer["Part of title and artists"]: @Html.TextBoxFor(x => x.Query)
    </p>
    <p>
        @ViewLocalizer["Min rating (whole, 0–100)"]: @Html.TextBoxFor(x => x.MinRating)
    </p>
    <p>
        @ViewLocalizer["Songs Per Page"]: @Html.TextBoxFor(x => x.SongsPerPage)
    </p>
    <p>
        <label>
            @Html.CheckBoxFor(x => x.IncludeTrace)
            @ViewLocalizer["Include the Index API trace for developers"]
        </label>
    </p>
    <input type="submit" value="@ViewLocalizer["Search"]" onclick="this.form.submit(); this.disabled=true; this.value='@ViewLocalizer["Querying (takes 5–60 seconds)…"]'; " />
}

@if (response != null)
{
    <div class="mt-4">
        <h3 class="d-inline-block">@ViewLocalizer["Results"]</h3>
        @Html.ActionLink($"\ud83d\udd17{ViewLocalizer["Permalink"].Value}", "SongsByHeader", "Home", Model, new { target = "_blank" })
    </div>

    @await Html.PartialAsync("Paging", Model)

    <table>
        <thead>
            <tr class="fw-bold">
                <td>@ViewLocalizer["Song"]</td>
                <td class="ps-2">@ViewLocalizer["Source"]</td>
                <td class="ps-2">@ViewLocalizer["Tonality"]</td>
                <td class="ps-2">@ViewLocalizer["Rating"]</td>
            </tr>
        </thead>
        @foreach (var song in response.Songs)
        {
            <tr>
                <td class="pt-1">
                    @foreach (var (fragment, isHighlighted) in SearchHighlightingTools.GetFragments(Model.Query, string.Join(", ", song.Artists ?? Enumerable.Empty<string>())))
                    {<span class="@(isHighlighted ? "search-highlighted" : null)">@fragment</span>}
                    <span> – </span>
                    <a href="@Url.Action("Song", new SongModel { ExternalId = song.ExternalId })">
                        @foreach (var (fragment, isHighlighted) in SearchHighlightingTools.GetFragments(Model.Query, song.Title!))
                        {<span class="@(isHighlighted ? "search-highlighted" : null)">@fragment</span>}
                    </a>
                </td>
                <td class="pt-1 ps-2">@song.Source</td>
                <td class="pt-1 ps-2">@song.BestTonality?.Tonality</td>
                <td class="pt-1 ps-2">@((int)(song.Rating ?? 0))%</td>
            </tr>
        }
    </table>

    @await Html.PartialAsync("Paging", Model)
}

@await Html.PartialAsync("Trace")