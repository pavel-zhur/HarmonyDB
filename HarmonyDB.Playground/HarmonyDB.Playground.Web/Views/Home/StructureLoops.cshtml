@using HarmonyDB.Index.Analysis.Tools
@using HarmonyDB.Index.Api.Model.VExternal1
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer ViewLocalizer
@model StructureLoopsModel

@{
    StructureLoopsResponse? response = ViewBag.Response;

    ViewBag.Title = $"{(response == null ? null : $"{response.Total} {ViewLocalizer["found"].Value} - ")}{ViewLocalizer["Popular Loops"].Value}";
    Layout = "_Layout";
}

<div>
    <h3 class="d-inline-block">@ViewLocalizer["See the most popular chord progressions"]</h3>
    @Html.ActionLink($"\ud83d\udd17{ViewLocalizer["Permalink"].Value}", "StructureLoops", "Home", Model with
    {
        JustForm = true,
    }, new { target = "_blank" })
</div>

@using (Html.BeginForm("StructureLoops", "Home", Model, FormMethod.Get))
{
    <p>
        @ViewLocalizer["Ordering"]:
        @Html.DropDownListFor(x => x.Ordering, Enum.GetValues<StructureLoopsRequestOrdering>().Select(x => new SelectListItem(x.ToString(), x.ToString())))
    </p>
    <p>
        @ViewLocalizer["Min length"]: @Html.TextBoxFor(x => x.MinLength)
    </p>
    <p>
        @ViewLocalizer["Max length"]: @Html.TextBoxFor(x => x.MaxLength)
    </p>
    <p>
        @ViewLocalizer["Min total songs"]: @Html.TextBoxFor(x => x.MinTotalSongs)
    </p>
    <p>
        @ViewLocalizer["Min total occurrences"]: @Html.TextBoxFor(x => x.MinTotalOccurrences)
    </p>
    <p>
        @ViewLocalizer["Min total successions"]: @Html.TextBoxFor(x => x.MinTotalSuccessions)
    </p>
    <p>
        @ViewLocalizer["Min tonality confidence"]: @Html.TextBoxFor(x => x.MinTonalityConfidence)
    </p>
    <p>
        @ViewLocalizer["Min tonic confidence"]: @Html.TextBoxFor(x => x.MinTonicConfidence)
    </p>
    <p>
        @ViewLocalizer["Max tonality confidence"]: @Html.TextBoxFor(x => x.MaxTonalityConfidence)
    </p>
    <p>
        @ViewLocalizer["Max tonic confidence"]: @Html.TextBoxFor(x => x.MaxTonicConfidence)
    </p>
    <p>
        @ViewLocalizer["Min tonic score"]: @Html.TextBoxFor(x => x.MinTonicScore)
    </p>
    <p>
        @ViewLocalizer["Min scale score"]: @Html.TextBoxFor(x => x.MinScaleScore)
    </p>
    <p>
        @ViewLocalizer["Second filter"]:
        @Html.DropDownListFor(x => x.SecondFilter, Enum.GetValues<StructureRequestSecondFilter>().Select(x => new SelectListItem(x.ToString(), x.ToString())))
    </p>
    <p>
        @ViewLocalizer["Detected scale filter"]:
        @Html.DropDownListFor(x => x.DetectedScaleFilter, Enum.GetValues<StructureRequestScaleFilter>().Select(x => new SelectListItem(x.ToString(), x.ToString())))
    </p>
    <p>
        @ViewLocalizer["Loops Per Page"]: @Html.TextBoxFor(x => x.LoopsPerPage)
    </p>
    <p>
        <label>
            @Html.CheckBoxFor(x => x.IncludeTrace)
            @ViewLocalizer["Include the Index API trace for developers"]
        </label>
    </p>
    <input type="submit" value="@ViewLocalizer["List"]" onclick="this.form.submit(); this.disabled=true; this.value='@ViewLocalizer["Querying (takes 5–60 seconds)…"]'; " />
}

@if (response != null)
{
    <div class="mt-4">
        <h3 class="d-inline-block">@ViewLocalizer["Results"]</h3>
        @Html.ActionLink($"\ud83d\udd17{ViewLocalizer["Permalink"].Value}", "StructureLoops", "Home", Model, new { target = "_blank" })
    </div>

    <div class="mt-1">
        <h5 class="d-inline-block">@ViewLocalizer["Distributions"]</h5>
    </div>

    <table class="table table-bordered table-sm">
        <thead>
            <tr>
                <th>Percentile</th>
                @for (var i = 0; i <= 100; i += 10)
                {
                    <th>@i%</th>
                }
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@ViewLocalizer["Total Songs"]</td>
                @foreach (var value in response.Distributions.TotalSongs)
                {
                    <td>@value.ToString("N0")</td>
                }
            </tr>
            <tr>
                <td>@ViewLocalizer["Total Occurrences"]</td>
                @foreach (var value in response.Distributions.TotalOccurrences)
                {
                    <td>@value.ToString("N0")</td>
                }
            </tr>
            <tr>
                <td>@ViewLocalizer["Total Successions"]</td>
                @foreach (var value in response.Distributions.TotalSuccessions)
                {
                    <td>@value.ToString("N0")</td>
                }
            </tr>
            <tr>
                <td>@ViewLocalizer["Tonality Confidence"]</td>
                @foreach (var value in response.Distributions.TonalityConfidence)
                {
                    <td>@value.ToString("P0")</td>
                }
            </tr>
            <tr>
                <td>@ViewLocalizer["Tonic Confidence"]</td>
                @foreach (var value in response.Distributions.TonicConfidence)
                {
                    <td>@value.ToString("P0")</td>
                }
            </tr>
            <tr>
                <td>@ViewLocalizer["Tonic Score"]</td>
                @foreach (var value in response.Distributions.TonicScore)
                {
                    <td>@value.ToString("P0")</td>
                }
            </tr>
            <tr>
                <td>@ViewLocalizer["Scale Score"]</td>
                @foreach (var value in response.Distributions.ScaleScore)
                {
                    <td>@value.ToString("P0")</td>
                }
            </tr>
        </tbody>
    </table>

    @await Html.PartialAsync("Paging", Model)

    <table class="table table-bordered table-sm">
        <thead>
            <tr class="fw-bold">
                <td>@ViewLocalizer["Progression"]</td>
                <td>@ViewLocalizer["Length"]</td>
                <td>@ViewLocalizer["Total Songs"]</td>
                <td>@ViewLocalizer["Total Occurrences"]</td>
                <td>@ViewLocalizer["Total Successions"]</td>
                <td>@ViewLocalizer["Detected Tonality"]</td>
                <td>@ViewLocalizer["Second Detected Tonality"]</td>
                <td>@ViewLocalizer["Parallel to Detected Tonality (if not second)"]</td>
                <td>@ViewLocalizer["Tonic Confidence"]</td>
                <td>@ViewLocalizer["Tonic Score"]</td>
                <td>@ViewLocalizer["Scale Score"]</td>
            </tr>
        </thead>
        @foreach (var loop in response.Loops)
        {
            <tr>
                <td>@Html.ActionLink(loop.Normalized.GetTitle(loopify: false), "StructureLoop", new StructureLoopModel { Normalized = loop.Normalized })</td>
                <td>@loop.Length</td>
                <td>@loop.TotalSongs.ToString("N0")</td>
                <td>@loop.TotalOccurrences.ToString("N0")</td>
                <td>@loop.TotalSuccessions.ToString("N0")</td>
                @{
                    var predicted = loop.Probabilities.GetPredictedTonality();
                    var secondPredicted = loop.Probabilities.GetSecondPredictedTonality(out var secondConfidence);
                    var parallelToPredicted = predicted.GetParallelScale();
                }
                <td class="text-nowrap">
                    <span>@loop.Probabilities.TonalityConfidence().ToString("P0")</span>
                    <b>@predicted.ToLoopTonalityTitle()</b>
                </td>
                <td class="text-nowrap">
                    <span>@secondConfidence.ToString("P0")</span>
                    <b>@secondPredicted.ToLoopTonalityTitle()</b>
                </td>
                <td class="text-nowrap">
                    @if (secondPredicted != parallelToPredicted)
                    {
                        <span>@loop.Probabilities[parallelToPredicted.ToIndex()].ToString("P0")</span>
                        <b>@parallelToPredicted.ToLoopTonalityTitle()</b>
                    }
                </td>
                <td>@loop.Probabilities.TonicConfidence().ToString("P0")</td>
                <td>@loop.ScaleScore.ToString("P0")</td>
                <td>@loop.TonicScore.ToString("P0")</td>
            </tr>
        }
    </table>

    @await Html.PartialAsync("Paging", Model)
}

@await Html.PartialAsync("Trace")
