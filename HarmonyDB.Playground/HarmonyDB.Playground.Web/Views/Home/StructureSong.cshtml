@using HarmonyDB.Common.Representations.OneShelf
@using HarmonyDB.Index.Analysis.Tools
@using HarmonyDB.Index.Api.Model.VExternal1
@using Microsoft.AspNetCore.Mvc.Localization
@using OneShelf.Common
@inject IViewLocalizer ViewLocalizer
@model StructureSongModel

@{
    StructureSongResponse? response = ViewBag.Response;

    ViewBag.Title = response == null ? ViewLocalizer["Structure Song"].Value : $"{response.Song.ExternalId} - {ViewLocalizer["Structure Song"].Value}";
    Layout = "_Layout";
}

<div>
    <h3 class="d-inline-block">@ViewLocalizer["Structure Song Details"]</h3>
    @Html.ActionLink($"\ud83d\udd17{ViewLocalizer["Permalink"].Value}", "StructureSong", "Home", Model, new { target = "_blank" })
</div>

<ul>
    <li>
        @if (Model.IncludeTrace)
        {
            @Html.ActionLink(ViewLocalizer["Exclude the Index API trace for developers"].Value, "StructureSong", Model with { IncludeTrace = false })
        }
        else
        {
            @Html.ActionLink(ViewLocalizer["Include the Index API trace for developers"].Value, "StructureSong", Model with { IncludeTrace = true })
        }
    </li>
</ul>

@if (response != null)
{
    var song = response.Song;
    var loops = response.Loops.ToDictionary(x => x.Normalized);
    var links = response.Links
        .Select(l => (link: l, loop: loops[l.Normalized]))
        .GroupBy(x => x.loop.Normalized)
        .OrderByDescending(x => x.Sum(x => x.link.Occurrences))
        .SelectMany(g => g
            .OrderBy(x => x.link.NormalizationRoot)
            .WithIsFirst())
        .ToList();

    <div class="mt-4">
        <h3 class="d-inline-block">@ViewLocalizer["Song Information"]</h3>
    </div>

    <table class="table table-bordered table-sm w-auto">
        <tbody>
            <tr>
                <td class="fw-bold">@ViewLocalizer["Song"]</td>
                <td>
                    @string.Join(", ", song.IndexHeader.Artists ?? Enumerable.Empty<string>()) – @song.IndexHeader.Title
                </td>
            </tr>
            <tr>
                <td class="fw-bold">@ViewLocalizer["Source"]</td>
                <td>@song.IndexHeader.Source</td>
            </tr>
            <tr>
                <td class="fw-bold">@ViewLocalizer["Known Tonality"]</td>
                <td>
                    <b>@song.KnownTonalityIndex?.ToSongTonalityTitle()</b>
                </td>
            </tr>
            <tr>
                <td class="fw-bold">@ViewLocalizer["Known Tonality Reliable"]</td>
                <td>@song.IndexHeader.BestTonality?.IsReliable</td>
            </tr>
            <tr>
                <td class="fw-bold">@ViewLocalizer["Rating"]</td>
                <td>@((int)(song.IndexHeader.Rating ?? 0))%</td>
            </tr>
            <tr>
                <td class="fw-bold">@ViewLocalizer["Total Loops"]</td>
                <td>@song.TotalLoops.ToString("N0")</td>
            </tr>
            <tr>
                <td class="fw-bold">@ViewLocalizer["Detected Tonality"]</td>
                @{
                    var predicted = song.Probabilities.GetPredictedTonality();
                    var secondPredicted = song.Probabilities.GetSecondPredictedTonality(out var secondConfidence);
                    var parallelToPredicted = predicted.GetParallelScale();
                }
                <td class="text-nowrap">
                    <span>@song.Probabilities.TonalityConfidence().ToString("P0")</span>
                    <b>@predicted.ToSongTonalityTitle()</b>
                </td>
            </tr>
            <tr>
                <td class="fw-bold">@ViewLocalizer["Second Detected Tonality"]</td>
                <td class="text-nowrap">
                    <span>@secondConfidence.ToString("P0")</span>
                    <b>@secondPredicted.ToSongTonalityTitle()</b>
                </td>
            </tr>
            <tr>
                <td class="fw-bold">@ViewLocalizer["Parallel to Detected Tonality (if not second)"]</td>
                <td class="text-nowrap">
                    @if (secondPredicted != parallelToPredicted)
                    {
                        <span>@song.Probabilities[parallelToPredicted.ToIndex()].ToString("P0")</span>
                        <b>@parallelToPredicted.ToSongTonalityTitle()</b>
                    }
                </td>
            </tr>
            <tr>
                <td class="fw-bold">@ViewLocalizer["Tonic Confidence"]</td>
                <td>@song.Probabilities.TonicConfidence().ToString("P0")</td>
            </tr>
            <tr>
                <td class="fw-bold">@ViewLocalizer["Tonic Score"]</td>
                <td>@song.TonicScore.ToString("P0")</td>
            </tr>
            <tr>
                <td class="fw-bold">@ViewLocalizer["Scale Score"]</td>
                <td>@song.ScaleScore.ToString("P0")</td>
            </tr>
        </tbody>
    </table>

    <div class="mt-4">
        <h3 class="d-inline-block">@ViewLocalizer["Detected Tonality Probabilities"]</h3>
    </div>

    <table class="table table-bordered table-sm table-fixed">
        <thead>
            <tr class="fw-bold">
                @for (byte note = 0; note < Note.Modulus; note++)
                {
                    <td>@(new Note(note).Representation(new()))</td>
                }
                <td></td>
            </tr>
        </thead>
        <tbody>
            @foreach (var isMinor in new[] { false, true, })
            {
                <tr>
                    @for (byte note = 0; note < Note.Modulus; note++)
                    {
                        <td>@song.Probabilities[(note, isMinor).ToIndex()].ToString("P0")</td>
                    }
                    <td class="fw-bold">@(isMinor ? ViewLocalizer["minor"] : ViewLocalizer["major"])</td>
                </tr>
            }
        </tbody>
    </table>

    <div class="mt-4">
        <h3 class="d-inline-block">@ViewLocalizer["Loops"]</h3>
    </div>

    <table class="table table-bordered table-sm">
        <thead>
            <tr class="fw-bold">
                <td>@ViewLocalizer["Title"]</td>
                <td>@ViewLocalizer["Modulation"]</td>
                <td>@ViewLocalizer["Normalization Root"]</td>
                <td>@ViewLocalizer["Weight"]</td>
                <td>@ViewLocalizer["Occurrences"]</td>
                <td>@ViewLocalizer["Successions"]</td>
                <td>@ViewLocalizer["Length"]</td>
                <td>@ViewLocalizer["Total Songs"]</td>
                <td>@ViewLocalizer["1 + Ln(Total Songs)"]</td>
                <td>@ViewLocalizer["Total Occurrences"]</td>
                <td>@ViewLocalizer["Total Successions"]</td>
                <td>@ViewLocalizer["Detected Tonality"]</td>
                <td>@ViewLocalizer["Second Detected Tonality"]</td>
                <td>@ViewLocalizer["Parallel to Detected Tonality (if not second)"]</td>
                <td>@ViewLocalizer["Tonic Confidence"]</td>
                <td>@ViewLocalizer["Tonic Score"]</td>
                <td>@ViewLocalizer["Scale Score"]</td>
            </tr>
        </thead>
        <tbody>
            @foreach (var ((link, loop), isFirst) in links)
            {
                <tr>
                    <td class="text-nowrap">
                        @Html.ActionLink(loop.Normalized.GetTitle(loopify: false), "StructureLoop", new StructureLoopModel { Normalized = loop.Normalized }, new { @class = isFirst ? null : "text-muted" })
                    </td>
                    <td>
                        @if (!isFirst)
                        {
                            <span>֎</span>
                        }
                    </td>
                    <td>@link.NormalizationRoot</td>
                    <td>@link.GetWeight(loop, song.IndexHeader.BestTonality?.IsReliable == true)</td>
                    <td>@link.Occurrences</td>
                    <td>@link.Successions</td>
                    @if (isFirst)
                    {
                        var loopPredicted = loop.Probabilities.GetPredictedTonality();
                        var loopSecondPredicted = loop.Probabilities.GetSecondPredictedTonality(out var loopSecondConfidence);
                        var loopParallelToPredicted = loopPredicted.GetParallelScale();

                        <td>@loop.Length</td>
                        <td>@loop.TotalSongs.ToString("N0")</td>
                        <td>@((1 + Math.Log(loop.TotalSongs)).ToString("N2"))</td>
                        <td>@loop.TotalOccurrences.ToString("N0")</td>
                        <td>@loop.TotalSuccessions.ToString("N0")</td>
                        <td class="text-nowrap">
                            <span>@loop.Probabilities.TonalityConfidence().ToString("P0")</span>
                            <b>@loopPredicted.ToLoopTonalityTitle()</b>
                        </td>
                        <td class="text-nowrap">
                            <span>@loopSecondConfidence.ToString("P0")</span>
                            <b>@loopSecondPredicted.ToLoopTonalityTitle()</b>
                        </td>
                        <td class="text-nowrap">
                            @if (loopSecondPredicted != loopParallelToPredicted)
                            {
                                <span>@loop.Probabilities[loopParallelToPredicted.ToIndex()].ToString("P0")</span>
                                <b>@loopParallelToPredicted.ToLoopTonalityTitle()</b>
                            }
                        </td>
                        <td>@loop.Probabilities.TonicConfidence().ToString("P0")</td>
                        <td>@loop.TonicScore.ToString("P0")</td>
                        <td>@loop.ScaleScore.ToString("P0")</td>
                    }
                    else
                    {
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                    }
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>@ViewLocalizer["No data available."]</p>
}

@if (Model.IncludeTrace)
{
    @await Html.PartialAsync("Trace")
}
