@using HarmonyDB.Index.Api.Model.VExternal1
@using HarmonyDB.Index.Api.Model.VExternal1.Main
@using HarmonyDB.Playground.Web.Models.Home
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer ViewLocalizer
@model LoopsModel

@{
    LoopsResponse? response = ViewBag.Response;

    ViewBag.Title = $"{(response == null ? null : $"{response.Total} {ViewLocalizer["found"].Value} - ")}{ViewLocalizer["Popular Loops"].Value}";
    Layout = "_Layout";
}

<div>
    <h3 class="d-inline-block">@ViewLocalizer["See the most popular chord progressions"]</h3>
    @Html.ActionLink($"\ud83d\udd17{ViewLocalizer["Permalink"].Value}", "Loops", "Home", Model with
    {
        JustForm = true,
    }, new { target = "_blank" })
</div>

@using (Html.BeginForm("Loops", "Home", Model, FormMethod.Get))
{
    <p>
        @ViewLocalizer["Ordering"]:
        @Html.DropDownListFor(x => x.Ordering, Enum.GetValues<LoopsRequestOrdering>().Select(x => new SelectListItem(x.ToString(), x.ToString())))
    </p>
    <p>
        @ViewLocalizer["Min length"]: @Html.TextBoxFor(x => x.MinLength)
    </p>
    <p>
        @ViewLocalizer["Max length"]: @Html.TextBoxFor(x => x.MaxLength)
    </p>
    <p>
        @ViewLocalizer["Min total songs"]: @Html.TextBoxFor(x => x.MinTotalSongs)
    </p>
    <p>
        @ViewLocalizer["Min total occurrences"]: @Html.TextBoxFor(x => x.MinTotalOccurrences)
    </p>
    <p>
        @ViewLocalizer["Min total successions"]: @Html.TextBoxFor(x => x.MinTotalSuccessions)
    </p>
    <p>
        @ViewLocalizer["Loops Per Page"]: @Html.TextBoxFor(x => x.LoopsPerPage)
    </p>
    <p>
        <label>
            @Html.CheckBoxFor(x => x.IncludeTrace)
            @ViewLocalizer["Include the Index API trace for developers"]
        </label>
    </p>
    <p>
        <label>
            @Html.CheckBoxFor(x => x.IncludeRootsStatistics)
            @ViewLocalizer["Include the roots statistics trace"]
        </label>
    </p>
    <p>
        @ViewLocalizer["Compound"]:
        @Html.DropDownListFor(x => x.Compound, Enum.GetValues<LoopsRequestCompoundFilter>().Select(x => new SelectListItem(x.ToString(), x.ToString())))
    </p>
    <input type="submit" value="@ViewLocalizer["List"]" onclick="this.form.submit(); this.disabled=true; this.value='@ViewLocalizer["Querying (takes 5–60 seconds)…"]'; " />
}

@if (response != null)
{
    <div class="mt-4">
        <h3 class="d-inline-block">@ViewLocalizer["Results"]</h3>
        @Html.ActionLink($"\ud83d\udd17{ViewLocalizer["Permalink"].Value}", "Loops", "Home", Model, new { target = "_blank" })
    </div>

    @await Html.PartialAsync("Paging", Model)

    <table class="table table-bordered table-sm">
        <thead>
            <tr>
                <td>@ViewLocalizer["Progression"]</td>
                <td>@ViewLocalizer["Length"]</td>
                <td>@ViewLocalizer["Total Songs"]</td>
                <td>@ViewLocalizer["Total Occurrences"]</td>
                <td>@ViewLocalizer["Total Successions"]</td>
                <td>@ViewLocalizer["Compound"]</td>
                @if (Model.IncludeRootsStatistics)
                {
                    <td>@ViewLocalizer["Roots Statistics"]</td>
                }
            </tr>
        </thead>
        @foreach (var loop in response.Loops)
        {
            <tr>
                <td>@Html.ActionLink(loop.Progression, "SongsByChords", new SongsByChordsModel { Query = loop.Progression, JustForm = true })</td>
                <td>@loop.Length</td>
                <td>@loop.TotalSongs.ToString("N0")</td>
                <td>@loop.TotalOccurrences.ToString("N0")</td>
                <td>@loop.TotalSuccessions.ToString("N0")</td>
                <td>@loop.IsCompound</td>
                @if (Model.IncludeRootsStatistics)
                {
                    <td>@string.Join(", ", loop.RootsStatistics)</td>
                }
            </tr>
        }
    </table>

    @await Html.PartialAsync("Paging", Model)
}

@await Html.PartialAsync("Trace")