@using HarmonyDB.Index.Analysis.Tools
@using HarmonyDB.Index.Api.Model.VExternal1.Tonalities
@using HarmonyDB.Playground.Web.Models.Home
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer ViewLocalizer
@model LoopsModel

@{
    LoopsResponse? response = ViewBag.Response;

    ViewBag.Title = $"{(response == null ? null : $"{response.Total} {ViewLocalizer["found"].Value} - ")}{ViewLocalizer["Popular Loops"].Value}";
    Layout = "_Layout";
}

<div>
    <h3 class="d-inline-block">@ViewLocalizer["See the most popular chord progressions"]</h3>
    @Html.ActionLink($"\ud83d\udd17{ViewLocalizer["Permalink"].Value}", "Loops", "Home", Model with
    {
        JustForm = true,
    }, new { target = "_blank" })
</div>

@using (Html.BeginForm("Loops", "Home", Model, FormMethod.Get))
{
    <p>
        @ViewLocalizer["Ordering"]:
        @Html.DropDownListFor(x => x.Ordering, LoopsModel.SupportedOrdering.Select(x => new SelectListItem(x.ToString(), x.ToString())))
    </p>
    <p>
        @ViewLocalizer["Min length"]: @Html.TextBoxFor(x => x.MinLength)
    </p>
    <p>
        @ViewLocalizer["Max length"]: @Html.TextBoxFor(x => x.MaxLength)
    </p>
    <p>
        @ViewLocalizer["Min total songs"]: @Html.TextBoxFor(x => x.MinTotalSongs)
    </p>
    <p>
        @ViewLocalizer["Min total occurrences"]: @Html.TextBoxFor(x => x.MinTotalOccurrences)
    </p>
    <p>
        @ViewLocalizer["Min total successions"]: @Html.TextBoxFor(x => x.MinTotalSuccessions)
    </p>
    <p>
        @ViewLocalizer["Loops Per Page"]: @Html.TextBoxFor(x => x.ItemsPerPage)
    </p>
    <p>
        @ViewLocalizer["Scale"]:
        @Html.DropDownListFor(x => x.DetectedScaleFilter, Enum.GetValues<RequestScaleFilter>().Select(x => new SelectListItem(x.ToString(), x.ToString())))
    </p>
    <p>
        <label>
            @Html.CheckBoxFor(x => x.IncludeTrace)
            @ViewLocalizer["Include the Index API trace for developers"]
        </label>
    </p>
    <input type="submit" value="@ViewLocalizer["List"]" onclick="this.form.submit(); this.disabled=true; this.value='@ViewLocalizer["Querying (takes 5–60 seconds)…"]'; " />
}

@if (response != null)
{
    <div class="mt-4">
        <h3 class="d-inline-block">@ViewLocalizer["Results"]</h3>
        @Html.ActionLink($"\ud83d\udd17{ViewLocalizer["Permalink"].Value}", "Loops", "Home", Model, new { target = "_blank" })
    </div>

    @await Html.PartialAsync("Paging", Model)

    @if (ViewBag.Limit != null)
    {
        @await Html.PartialAsync("Limit", (int)ViewBag.Limit)
    }
    else
    {
        <table class="table table-bordered table-sm">
            <thead>
            <tr class="fw-bold">
                <td>@ViewLocalizer["Progression"]</td>
                <td>@ViewLocalizer["Degrees"]</td>
                <td colspan="2">@ViewLocalizer["Tonality"]</td>
                <td colspan="4">@ViewLocalizer["Second Tonality"]</td>
                <td class="my-vertical">@ViewLocalizer["Length"]</td>
                <td class="my-vertical">@ViewLocalizer["Total Songs"]</td>
                <td class="my-vertical">@ViewLocalizer["Total Occurrences"]</td>
                <td class="my-vertical">@ViewLocalizer["Total Successions"]</td>
            </tr>
            </thead>
            @foreach (var loop in response.Loops)
            {
                var predicted = loop.Probabilities.GetPredictedTonality();
                var secondPredicted = loop.Probabilities.GetSecondPredictedTonality(out var secondConfidence);
                <tr>
                    <td>@Html.ActionLink(loop.Normalized.GetTitle(predicted), "SongsByChords", new SongsByChordsModel { Query = loop.Normalized.GetTitle(predicted, true), JustForm = true })</td>
                    <td>@loop.Normalized.GetFunctionsTitle(predicted)</td>
                    <td class="fw-bold">@predicted.ToLoopTonalityTitle(predicted)</td>
                    <td class="text-end">@loop.Probabilities.TonalityConfidence().ToString("P0")</td>
                    <td class="fw-bold">@secondPredicted.ToLoopTonalityTitle(predicted)</td>
                    <td class="text-end">@secondConfidence.ToString("P0")</td>
                    <td>@loop.Normalized.GetTitle(secondPredicted)</td>
                    <td>@loop.Normalized.GetFunctionsTitle(secondPredicted)</td>
                    <td class="text-end">@loop.Length</td>
                    <td class="text-end">@loop.TotalSongs.ToString("N0")</td>
                    <td class="text-end">@loop.TotalOccurrences.ToString("N0")</td>
                    <td class="text-end">@loop.TotalSuccessions.ToString("N0")</td>
                </tr>
            }
        </table>
    }

    @await Html.PartialAsync("Paging", Model)
}

@await Html.PartialAsync("Trace")