// https://codepen.io/32bitkid/pen/KKOaVp

@size: 300px;
@border: 1px solid #efefef;

.accidental {
    //vertical-align: super;
    font-size: 0.8em;
}

.circle-of-fifths {
    font-family: var(--bs-font-monospace);
    font-size: (@size/23);
    width: @size;
    height: @size;
    border: @border;
    border-radius: 50%;
    position: relative;
    box-sizing: border-box;
    box-shadow: 0 (@size/40) (@size/40) rgba(0,0,0,0.25), inset 0 0 0 (@size/75*9) white, inset 0 0 0 (@size/75*20) #eee;

    @inner-size: 24%;

    &::after {
        content: "";
        position: absolute;
        top: @inner-size;
        left: @inner-size;
        right: @inner-size;
        bottom: @inner-size;
        border-radius: 50%;
        box-sizing: border-box;
        background-color: white;
        box-shadow: inset 0 (@size/40) (@size/40) rgba(0,0,0,0.25);
    }
}

.center() {
    position: absolute;
    top: 50%;
    left: 50%;
    transform +_: translate(-50%, -50%);
}

.key {
    .center();

    &::before {
        content: "";
        position: absolute;
        width: 1px;
        background-color: rgba(0,0,0,0.1);
        height: @size;
    }

    > * {
        position: absolute;
        padding: 7px;
    }
}

.key-pos(@key-pos) {
    @a: (@key-pos - 4) * (pi()/6);
    @dist: (@size*0.33);

    transform +_: translate(cos(@a)*@dist,sin(@a)*@dist);

    > .major {
        transform: translate(cos(@a)*(@size/10),sin(@a)*(@size/10)) translate(-50%, -50%);
        cursor: pointer;
    }

    > .minor {
        transform: translate(cos(@a)*(-@size/100),sin(@a)*(-@size/100)) translate(-50%, -50%);
        cursor: pointer;
    }

    &::before {
        transform: translate(cos(@a)*-@dist,sin(@a)*-@dist) translate(0%, -50%) rotate(unit((3.1415/12),rad)) rotate(unit((@a + pi()/2), rad));
        ;
    }
}

.key-loop(@key) when (@key > 0) {
    .key-loop((@key - 1));

    .key:nth-child(@{key}) {
        .key-pos(@key);
    }
}

.key-loop(12);
