@page "/user"
@using OneShelf.Frontend.Web.Services.Worker
@using SpawnDev.BlazorJS
@inject IdentityProvider IdentityProvider
@inject NavigationManager NavigationManager
@inject BlazorJSRuntime BlazorJsRuntime
@inject OptionalWebWorker OptionalWebWorker
@inject JsFunctions JsFunctions

<PageTitle>Профиль</PageTitle>

<h1>Добрый день, @_title</h1>

@if (!Unauthorized)
{
    <div class="mb-3">Вы можете присоединяться к клубам, напишите админам.</div>
}

@if (IdentityProvider.Identity != null)
{
    <button class="btn btn-primary mb-3" @onclick="Logout">Выйти</button>
}
else
{
    <h1>Вам бы войти бы:</h1>
    <button class="btn btn-primary mb-3" @onclick="() => IdentityProvider.EnsureAuthorized()">Войти</button>
}

@if (Unauthorized)
{
    <div class="mb-3">Может быть, вы видите это сообщение по ошибке. Если вам кажется, что доступ должен быть, тем более, напишите, пожалуйста. Спасибо.</div>
}

<h3>Хитрые настройки</h3>
<div class="mb-3">Это для случаев если приложение не загружается с первого раза. Не включайте режим совместимости, если всё работает.</div>
<div>
    <label>
        <input type="checkbox" disabled="disabled" checked="@(_isCompatMode)"/>
        Совместимость сейчас
    </label>
</div>
<div>
    <label>
        <input type="checkbox" disabled="disabled" checked="@(_forceCompatMode)" />
        Совместимость всегда
        <button @onclick="SwitchForceCompatMode">@(_forceCompatMode ? "Выключить" : "Включить")</button>
    </label>
</div>
<div>
    <label>
        <input type="checkbox" disabled="disabled" checked="@(OptionalWebWorker.IsInitializationFinished)" />
        Optional web worker initialized
    </label>
</div>
<div>
    <label>
        <input type="checkbox" disabled="disabled" checked="@(OptionalWebWorker.WebWorkerExists)" />
        Optional web worker exists
    </label>
</div>

@code {
    private string? _title;
    private bool _isCompatMode;
    private bool _forceCompatMode;

    [Parameter]
    [SupplyParameterFromQuery]
    public bool Unauthorized { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _title = IdentityProvider.Identity?.Title;

        _isCompatMode = BlazorJsRuntime.WindowThis!.JSRef!.Get<bool>("useCompatMode");
        _forceCompatMode = BlazorJsRuntime.WindowThis.LocalStorage.GetItem("forceCompatMode") == "1";
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
    }

    private async Task Logout()
    {
        await IdentityProvider.Set(null);
        NavigationManager.NavigateTo("/");
    }

    private async Task SwitchForceCompatMode()
    {
        if (!await JsFunctions.Confirm("Прям уверены? Лучше не надо."))
            return;

        if (_forceCompatMode)
        {
            BlazorJsRuntime.WindowThis!.LocalStorage.RemoveItem("forceCompatMode");
        }
        else
        {
            BlazorJsRuntime.WindowThis!.LocalStorage.SetItem("forceCompatMode", "1");
        }

        BlazorJsRuntime.WindowThis!.Location.Reload();
    }

}
