// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OneShelf.Videos.Database;

#nullable disable

namespace OneShelf.Videos.Database.Migrations.VideosDatabaseMigrations
{
    [DbContext(typeof(VideosDatabase))]
    [Migration("20240925120602_Statics")]
    partial class Statics
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OneShelf.Videos.Database.Models.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("OneShelf.Videos.Database.Models.AlbumConstraint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("After")
                        .HasColumnType("datetime2");

                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Before")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Include")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSquare")
                        .HasColumnType("bit");

                    b.Property<string>("StaticMessageSelectedType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StaticTopicId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("StaticTopicId");

                    b.ToTable("AlbumConstraints");
                });

            modelBuilder.Entity("OneShelf.Videos.Database.Models.DownloadedItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("LiveMediaId")
                        .HasColumnType("bigint");

                    b.Property<string>("ThumbnailFileName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FileName")
                        .IsUnique();

                    b.HasIndex("LiveMediaId")
                        .IsUnique();

                    b.ToTable("DownloadedItems");
                });

            modelBuilder.Entity("OneShelf.Videos.Database.Models.InventoryItem", b =>
                {
                    b.Property<int>("DatabaseInventoryItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DatabaseInventoryItemId"));

                    b.Property<string>("BaseUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContributorInfoDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContributorInfoProfilePictureBaseUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPhoto")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVideo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("MediaMetadataCreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MediaMetadataHeight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("MediaMetadataPhotoApertureFNumber")
                        .HasColumnType("real");

                    b.Property<string>("MediaMetadataPhotoCameraMake")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaMetadataPhotoCameraModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaMetadataPhotoExposureTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("MediaMetadataPhotoFocalLength")
                        .HasColumnType("real");

                    b.Property<int?>("MediaMetadataPhotoIsoEquivalent")
                        .HasColumnType("int");

                    b.Property<string>("MediaMetadataVideoCameraMake")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaMetadataVideoCameraModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("MediaMetadataVideoFps")
                        .HasColumnType("float");

                    b.Property<string>("MediaMetadataVideoStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaMetadataWidth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SyncDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DatabaseInventoryItemId");

                    b.ToTable("InventoryItems");
                });

            modelBuilder.Entity("OneShelf.Videos.Database.Models.LiveChat", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LiveChats");
                });

            modelBuilder.Entity("OneShelf.Videos.Database.Models.LiveMedia", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<long>("TopicChatId")
                        .HasColumnType("bigint");

                    b.Property<string>("DocumentAttributeTypes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentAttributes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Duration")
                        .HasColumnType("float");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<bool>("IsForwarded")
                        .HasColumnType("bit");

                    b.Property<DateTime>("MediaDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MediaFlags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MediaId")
                        .HasColumnType("bigint");

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MessageDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoFlags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id", "TopicChatId");

                    b.HasIndex("TopicId", "TopicChatId");

                    b.ToTable("LiveMediae");
                });

            modelBuilder.Entity("OneShelf.Videos.Database.Models.LiveTopic", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("LiveTopics");
                });

            modelBuilder.Entity("OneShelf.Videos.Database.Models.Static.StaticChat", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StaticChatFolderId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StaticChatFolderId")
                        .IsUnique();

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("OneShelf.Videos.Database.Models.Static.StaticChatFolder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Root")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ChatFolders");
                });

            modelBuilder.Entity("OneShelf.Videos.Database.Models.Static.StaticMessage", b =>
                {
                    b.Property<int>("DatabaseStaticMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DatabaseStaticMessageId"));

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Actor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Boosts")
                        .HasColumnType("int");

                    b.Property<string>("ContactInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DateUnixtime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<int?>("DurationSeconds")
                        .HasColumnType("int");

                    b.Property<DateTime>("Edited")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditedUnixtime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("File")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ForwardedFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("From")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("InlineBotButtons")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Inviter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LiveLocationPeriodSeconds")
                        .HasColumnType("int");

                    b.Property<string>("LocationInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Members")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MessageId")
                        .HasColumnType("int");

                    b.Property<string>("MimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("NewIconEmojiId")
                        .HasColumnType("bigint");

                    b.Property<string>("NewTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Performer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Poll")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReplyToMessageId")
                        .HasColumnType("int");

                    b.Property<string>("ReplyToPeerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SavedFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ScheduleDate")
                        .HasColumnType("int");

                    b.Property<string>("SelectedType")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("case when photo is not null then 'photo' when mimetype like 'video/%' and isnull(mediatype, 'null') in ('video_file', 'null') then 'video' else null end");

                    b.Property<long>("StaticChatId")
                        .HasColumnType("bigint");

                    b.Property<int?>("StaticTopicId")
                        .HasColumnType("int");

                    b.Property<string>("StickerEmoji")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextEntities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ViaBot")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Width")
                        .HasColumnType("int");

                    b.HasKey("DatabaseStaticMessageId");

                    b.HasIndex("StaticTopicId");

                    b.HasIndex("StaticChatId", "Id")
                        .IsUnique();

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("OneShelf.Videos.Database.Models.Static.StaticTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("OriginalTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RootMessageIdOr0")
                        .HasColumnType("int");

                    b.Property<long>("StaticChatId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StaticChatId", "RootMessageIdOr0")
                        .IsUnique();

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("OneShelf.Videos.Database.Models.UploadedAlbum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.Property<string>("GoogleAlbumId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId")
                        .IsUnique();

                    b.ToTable("UploadedAlbums");
                });

            modelBuilder.Entity("OneShelf.Videos.Database.Models.UploadedItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FileNameTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Json")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaItemId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("MediaItemIsPhoto")
                        .HasColumnType("bit");

                    b.Property<bool?>("MediaItemIsVideo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("MediaItemMetadataCreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MediaItemMimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MediaItemSyncDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("StaticChatId")
                        .HasColumnType("bigint");

                    b.Property<int>("StaticMessageId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int");

                    b.Property<string>("StatusMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TelegramPublishedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("UploadedItems");
                });

            modelBuilder.Entity("OneShelf.Videos.Database.Models.AlbumConstraint", b =>
                {
                    b.HasOne("OneShelf.Videos.Database.Models.Album", "Album")
                        .WithMany("Constraints")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OneShelf.Videos.Database.Models.Static.StaticTopic", "StaticTopic")
                        .WithMany("AlbumConstraints")
                        .HasForeignKey("StaticTopicId");

                    b.Navigation("Album");

                    b.Navigation("StaticTopic");
                });

            modelBuilder.Entity("OneShelf.Videos.Database.Models.LiveMedia", b =>
                {
                    b.HasOne("OneShelf.Videos.Database.Models.LiveTopic", "Topic")
                        .WithMany("Mediae")
                        .HasForeignKey("TopicId", "TopicChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("OneShelf.Videos.Database.Models.LiveTopic", b =>
                {
                    b.HasOne("OneShelf.Videos.Database.Models.LiveChat", "Chat")
                        .WithMany("Topics")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("OneShelf.Videos.Database.Models.Static.StaticChat", b =>
                {
                    b.HasOne("OneShelf.Videos.Database.Models.Static.StaticChatFolder", "StaticChatFolder")
                        .WithOne("StaticChat")
                        .HasForeignKey("OneShelf.Videos.Database.Models.Static.StaticChat", "StaticChatFolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaticChatFolder");
                });

            modelBuilder.Entity("OneShelf.Videos.Database.Models.Static.StaticMessage", b =>
                {
                    b.HasOne("OneShelf.Videos.Database.Models.Static.StaticChat", "StaticChat")
                        .WithMany("Messages")
                        .HasForeignKey("StaticChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OneShelf.Videos.Database.Models.Static.StaticTopic", "StaticTopic")
                        .WithMany("StaticMessages")
                        .HasForeignKey("StaticTopicId");

                    b.Navigation("StaticChat");

                    b.Navigation("StaticTopic");
                });

            modelBuilder.Entity("OneShelf.Videos.Database.Models.Static.StaticTopic", b =>
                {
                    b.HasOne("OneShelf.Videos.Database.Models.Static.StaticChat", "StaticChat")
                        .WithMany()
                        .HasForeignKey("StaticChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaticChat");
                });

            modelBuilder.Entity("OneShelf.Videos.Database.Models.UploadedAlbum", b =>
                {
                    b.HasOne("OneShelf.Videos.Database.Models.Album", "Album")
                        .WithOne("UploadedAlbum")
                        .HasForeignKey("OneShelf.Videos.Database.Models.UploadedAlbum", "AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("OneShelf.Videos.Database.Models.Album", b =>
                {
                    b.Navigation("Constraints");

                    b.Navigation("UploadedAlbum");
                });

            modelBuilder.Entity("OneShelf.Videos.Database.Models.LiveChat", b =>
                {
                    b.Navigation("Topics");
                });

            modelBuilder.Entity("OneShelf.Videos.Database.Models.LiveTopic", b =>
                {
                    b.Navigation("Mediae");
                });

            modelBuilder.Entity("OneShelf.Videos.Database.Models.Static.StaticChat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("OneShelf.Videos.Database.Models.Static.StaticChatFolder", b =>
                {
                    b.Navigation("StaticChat");
                });

            modelBuilder.Entity("OneShelf.Videos.Database.Models.Static.StaticTopic", b =>
                {
                    b.Navigation("AlbumConstraints");

                    b.Navigation("StaticMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
