using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Options;
using OneShelf.Common.OpenAi.Models;
using OneShelf.Common.OpenAi.Services;
using OneShelf.OneDragon.Database;
using OneShelf.OneDragon.Database.Model.Enums;
using OneShelf.OneDragon.Processor.Model;
using OneShelf.OneDragon.Processor.Services;
using OneShelf.Telegram.Model.CommandAttributes;
using OneShelf.Telegram.Model.Ios;
using OneShelf.Telegram.Services.Base;
using Telegram.BotAPI;
using Telegram.BotAPI.AvailableMethods;
using Telegram.BotAPI.AvailableTypes;

namespace OneShelf.OneDragon.Processor.Commands;

[BothCommand("videos", "–í–∏–¥–µ–æ", "–°–¥–µ–ª–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é")]
public class Videos : Command
{
    private readonly DragonDatabase _dragonDatabase;
    private readonly DragonScope _scope;
    private readonly Availability _availability;
    private readonly VideoGenerator _videoGenerator;
    private readonly TelegramBotClient _api;

    public Videos(Io io, DragonDatabase dragonDatabase, DragonScope scope, Availability availability, VideoGenerator videoGenerator, IOptions<TelegramOptions> options) 
        : base(io)
    {
        _dragonDatabase = dragonDatabase;
        _scope = scope;
        _availability = availability;
        _videoGenerator = videoGenerator;
        _api = new(options.Value.Token);
    }

    protected override async Task ExecuteQuickly()
    {
        var videosUnavailableUntil = await _availability.GetVideosUnavailableUntil(DateTime.Now);
        if (videosUnavailableUntil != null)
        {
            Io.WriteLine($"–õ–∞–ø–∫–∏ —É—Å—Ç–∞–ª–∏ —Å–Ω–∏–º–∞—Ç—å! –í–∏–¥–µ–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —Å {videosUnavailableUntil.Value:g} UTC üêæ");

            _dragonDatabase.Interactions.Add(new()
            {
                CreatedOn = DateTime.Now,
                ChatId = _scope.ChatId,
                UserId = Io.UserId,
                UpdateId = _scope.UpdateId,
                InteractionType = InteractionType.DirectVideosLimit,
                Serialized = "reset",
            });

            return;
        }

        var query = Io.FreeChoice("–ö–∞–∫–æ–µ –≤–∏–¥–µ–æ —Ö–æ—á–µ—à—å?");
        
        var resolutionChoice = Io.StrictChoice("–ö–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç?", x => x, new[] { "16:9", "9:16", "Square" });
        
        var duration = Io.StrictChoice("–°–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥? (1-20)", int.Parse, new[] { "5", "10", "15", "20" });

        if (duration is not (>= 1 and <= 20))
        {
            Io.WriteLine("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 20 —Å–µ–∫—É–Ω–¥.");
            return;
        }

        Io.WriteLine("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é Sora! üé¨");

        Scheduled(Background(query, resolutionChoice, duration));
    }

    private async Task Background(string query, string resolutionChoice, int duration)
    {
        var aiParameters = await _dragonDatabase.AiParameters.SingleAsync();

        // Convert resolution choice to width/height
        var (width, height) = resolutionChoice switch
        {
            "16:9" => (1280, 720),
            "9:16" => (720, 1280),
            "Square" => (720, 720),
            _ => (720, 720)
        };

        var result = await _videoGenerator.GenerateVideo(new()
        {
            Prompt = query,
            Width = width,
            Height = height,
            Duration = duration,
            UserId = _scope.UserId,
            DomainId = -1,
            ChatId = _scope.ChatId,
            UseCase = "direct videos",
            AdditionalBillingInfo = "one dragon",
            Model = aiParameters.SoraModel,
        });

        if (result.Success)
        {
            _dragonDatabase.Interactions.Add(new()
            {
                CreatedOn = DateTime.Now,
                ChatId = _scope.ChatId,
                UserId = Io.UserId,
                UpdateId = _scope.UpdateId,
                InteractionType = InteractionType.DirectVideosSuccess,
                Serialized = "1",
                ShortInfoSerialized = query,
            });

            await _dragonDatabase.SaveChangesAsync();

            // Send as video (Sora videos from Azure OpenAI)
            using var videoStream = new MemoryStream(result.VideoData);
            var videoFile = new InputFile(videoStream, "video.mp4");
            
            await _api.SendVideoAsync(new(_scope.ChatId, videoFile) 
            { 
                Caption = $"üé¨ {query} (–æ—Ç Sora üê∂)" 
            });
        }
        else
        {
            _dragonDatabase.Interactions.Add(new()
            {
                CreatedOn = DateTime.Now,
                ChatId = _scope.ChatId,
                UserId = Io.UserId,
                UpdateId = _scope.UpdateId,
                InteractionType = InteractionType.DirectVideosLimit,
                Serialized = "error",
                ShortInfoSerialized = result.ErrorMessage ?? "Unknown error",
            });

            await _dragonDatabase.SaveChangesAsync();

            throw new InvalidOperationException($"Video generation failed: {result.ErrorMessage}");
        }
    }
}