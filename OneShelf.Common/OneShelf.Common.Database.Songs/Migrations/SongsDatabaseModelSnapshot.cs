// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OneShelf.Common.Database.Songs;

#nullable disable

namespace OneShelf.Common.Database.Songs.Migrations
{
    [DbContext(typeof(SongsDatabase))]
    partial class SongsDatabaseModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArtistSong", b =>
                {
                    b.Property<int>("ArtistsId")
                        .HasColumnType("int");

                    b.Property<int>("SongsId")
                        .HasColumnType("int");

                    b.HasKey("ArtistsId", "SongsId");

                    b.HasIndex("SongsId");

                    b.ToTable("ArtistSong");
                });

            modelBuilder.Entity("OneShelf.Common.Database.Songs.Model.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryOverride")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("Name", "TenantId")
                        .IsUnique();

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("OneShelf.Common.Database.Songs.Model.ArtistSynonym", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId", "Title")
                        .IsUnique();

                    b.ToTable("ArtistSynonyms");
                });

            modelBuilder.Entity("OneShelf.Common.Database.Songs.Model.BillingUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DomainId")
                        .HasColumnType("int");

                    b.Property<int?>("InputTokens")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OutputTokens")
                        .HasColumnType("int");

                    b.Property<string>("UseCase")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DomainId");

                    b.HasIndex("UserId");

                    b.ToTable("BillingUsages");
                });

            modelBuilder.Entity("OneShelf.Common.Database.Songs.Model.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("SongId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("VersionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SongId");

                    b.HasIndex("VersionId", "SongId");

                    b.HasIndex("UserId", "SongId", "VersionId")
                        .IsUnique()
                        .HasFilter("[VersionId] IS NOT NULL");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("OneShelf.Common.Database.Songs.Model.Interaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("InteractionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Serialized")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortInfoSerialized")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("InteractionType", "CreatedOn");

                    b.ToTable("Interactions");
                });

            modelBuilder.Entity("OneShelf.Common.Database.Songs.Model.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Level")
                        .HasColumnType("tinyint");

                    b.Property<int?>("LikeCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("SongId")
                        .HasColumnType("int");

                    b.Property<int?>("Transpose")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("VersionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LikeCategoryId");

                    b.HasIndex("SongId");

                    b.HasIndex("VersionId", "SongId");

                    b.HasIndex("SongId", "UserId", "LikeCategoryId")
                        .IsUnique()
                        .HasFilter("[VersionId] IS NULL");

                    b.HasIndex("UserId", "SongId", "VersionId", "LikeCategoryId")
                        .IsUnique()
                        .HasFilter("[VersionId] IS NOT NULL AND [LikeCategoryId] IS NOT NULL");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("OneShelf.Common.Database.Songs.Model.LikeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Access")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CssColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CssIcon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<float>("PrivateWeight")
                        .HasColumnType("real");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId", "Name")
                        .IsUnique();

                    b.ToTable("LikeCategories");
                });

            modelBuilder.Entity("OneShelf.Common.Database.Songs.Model.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArtistId")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<string>("Part")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("SongId")
                        .HasColumnType("int");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("SongId");

                    b.HasIndex("TenantId");

                    b.HasIndex("Type", "ArtistId", "Category", "Part", "SongId")
                        .IsUnique()
                        .HasFilter("[ArtistId] IS NOT NULL AND [Category] IS NOT NULL AND [Part] IS NOT NULL AND [SongId] IS NOT NULL");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("OneShelf.Common.Database.Songs.Model.SameSongGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("SameSongGroups");
                });

            modelBuilder.Entity("OneShelf.Common.Database.Songs.Model.Song", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalKeywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryOverride")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<int?>("RedirectToSongId")
                        .HasColumnType("int");

                    b.Property<int?>("SameSongGroupId")
                        .HasColumnType("int");

                    b.Property<string>("SourceUniqueIdentifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("TemplateRating")
                        .HasColumnType("real");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnparsedTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("Index");

                    b.HasIndex("RedirectToSongId");

                    b.HasIndex("SameSongGroupId");

                    b.HasIndex("SourceUniqueIdentifier")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("OneShelf.Common.Database.Songs.Model.SongContent", b =>
                {
                    b.Property<int>("SongId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("SongId");

                    b.ToTable("SongContents");
                });

            modelBuilder.Entity("OneShelf.Common.Database.Songs.Model.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("ArePdfsAllowed")
                        .HasColumnType("bit");

                    b.Property<int>("LatestUsedIndex")
                        .HasColumnType("int");

                    b.Property<string>("PrivateDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("OneShelf.Common.Database.Songs.Model.User", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("AuthorizedToUseIllustrationAlterationsTemporarilySince")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAuthorizedToUseIllustrationAlterationsPermanently")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAuthorizedToUseIllustrations")
                        .HasColumnType("bit");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("OneShelf.Common.Database.Songs.Model.Version", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CollectiveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CollectiveSearchTag")
                        .HasColumnType("int");

                    b.Property<string>("CollectiveType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefaultTemplate")
                        .HasColumnType("bit");

                    b.Property<string>("PublishedSettings")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SongId")
                        .HasColumnType("int");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CollectiveId")
                        .IsUnique()
                        .HasFilter("[CollectiveId] IS NOT NULL");

                    b.HasIndex("CollectiveSearchTag");

                    b.HasIndex("Uri");

                    b.HasIndex("UserId");

                    b.HasIndex("SongId", "Uri")
                        .IsUnique();

                    b.ToTable("Versions");
                });

            modelBuilder.Entity("OneShelf.Common.Database.Songs.Model.VisitedChords", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Artists")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SearchQuery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SongId")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Transpose")
                        .HasColumnType("int");

                    b.Property<string>("Uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ViewedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SongId");

                    b.HasIndex("UserId");

                    b.ToTable("VisitedChords");
                });

            modelBuilder.Entity("OneShelf.Common.Database.Songs.Model.VisitedSearch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SearchedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("VisitedSearches");
                });

            modelBuilder.Entity("ArtistSong", b =>
                {
                    b.HasOne("OneShelf.Common.Database.Songs.Model.Artist", null)
                        .WithMany()
                        .HasForeignKey("ArtistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OneShelf.Common.Database.Songs.Model.Song", null)
                        .WithMany()
                        .HasForeignKey("SongsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OneShelf.Common.Database.Songs.Model.Artist", b =>
                {
                    b.HasOne("OneShelf.Common.Database.Songs.Model.Tenant", "Tenant")
                        .WithMany("Artists")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("OneShelf.Common.Database.Songs.Model.ArtistSynonym", b =>
                {
                    b.HasOne("OneShelf.Common.Database.Songs.Model.Artist", "Artist")
                        .WithMany("Synonyms")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("OneShelf.Common.Database.Songs.Model.BillingUsage", b =>
                {
                    b.HasOne("OneShelf.Common.Database.Songs.Model.User", "User")
                        .WithMany("BillingUsages")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OneShelf.Common.Database.Songs.Model.Comment", b =>
                {
                    b.HasOne("OneShelf.Common.Database.Songs.Model.Song", "Song")
                        .WithMany("Comments")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OneShelf.Common.Database.Songs.Model.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OneShelf.Common.Database.Songs.Model.Version", "Version")
                        .WithMany("Comments")
                        .HasForeignKey("VersionId", "SongId")
                        .HasPrincipalKey("Id", "SongId");

                    b.Navigation("Song");

                    b.Navigation("User");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("OneShelf.Common.Database.Songs.Model.Interaction", b =>
                {
                    b.HasOne("OneShelf.Common.Database.Songs.Model.User", "User")
                        .WithMany("Interactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OneShelf.Common.Database.Songs.Model.Like", b =>
                {
                    b.HasOne("OneShelf.Common.Database.Songs.Model.LikeCategory", "LikeCategory")
                        .WithMany("Likes")
                        .HasForeignKey("LikeCategoryId");

                    b.HasOne("OneShelf.Common.Database.Songs.Model.Song", "Song")
                        .WithMany("Likes")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OneShelf.Common.Database.Songs.Model.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OneShelf.Common.Database.Songs.Model.Version", "Version")
                        .WithMany("Likes")
                        .HasForeignKey("VersionId", "SongId")
                        .HasPrincipalKey("Id", "SongId");

                    b.Navigation("LikeCategory");

                    b.Navigation("Song");

                    b.Navigation("User");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("OneShelf.Common.Database.Songs.Model.LikeCategory", b =>
                {
                    b.HasOne("OneShelf.Common.Database.Songs.Model.Tenant", "Tenant")
                        .WithMany("LikeCategories")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("OneShelf.Common.Database.Songs.Model.User", "User")
                        .WithMany("LikeCategories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OneShelf.Common.Database.Songs.Model.Message", b =>
                {
                    b.HasOne("OneShelf.Common.Database.Songs.Model.Artist", "Artist")
                        .WithMany("Messages")
                        .HasForeignKey("ArtistId");

                    b.HasOne("OneShelf.Common.Database.Songs.Model.Song", "Song")
                        .WithMany("Messages")
                        .HasForeignKey("SongId");

                    b.HasOne("OneShelf.Common.Database.Songs.Model.Tenant", "Tenant")
                        .WithMany("Users")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Song");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("OneShelf.Common.Database.Songs.Model.Song", b =>
                {
                    b.HasOne("OneShelf.Common.Database.Songs.Model.User", "CreatedByUser")
                        .WithMany("SongsCreated")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OneShelf.Common.Database.Songs.Model.Song", "RedirectToSong")
                        .WithMany("RedirectsFromSongs")
                        .HasForeignKey("RedirectToSongId");

                    b.HasOne("OneShelf.Common.Database.Songs.Model.SameSongGroup", "SameSongGroup")
                        .WithMany("Songs")
                        .HasForeignKey("SameSongGroupId");

                    b.HasOne("OneShelf.Common.Database.Songs.Model.Tenant", "Tenant")
                        .WithMany("Songs")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("RedirectToSong");

                    b.Navigation("SameSongGroup");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("OneShelf.Common.Database.Songs.Model.SongContent", b =>
                {
                    b.HasOne("OneShelf.Common.Database.Songs.Model.Song", "Song")
                        .WithOne("Content")
                        .HasForeignKey("OneShelf.Common.Database.Songs.Model.SongContent", "SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");
                });

            modelBuilder.Entity("OneShelf.Common.Database.Songs.Model.User", b =>
                {
                    b.HasOne("OneShelf.Common.Database.Songs.Model.Tenant", "Tenant")
                        .WithMany("Messages")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("OneShelf.Common.Database.Songs.Model.Version", b =>
                {
                    b.HasOne("OneShelf.Common.Database.Songs.Model.Song", "Song")
                        .WithMany("Versions")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OneShelf.Common.Database.Songs.Model.User", "User")
                        .WithMany("Versions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OneShelf.Common.Database.Songs.Model.VisitedChords", b =>
                {
                    b.HasOne("OneShelf.Common.Database.Songs.Model.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongId");

                    b.HasOne("OneShelf.Common.Database.Songs.Model.User", "User")
                        .WithMany("HistoryChordsViews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OneShelf.Common.Database.Songs.Model.VisitedSearch", b =>
                {
                    b.HasOne("OneShelf.Common.Database.Songs.Model.User", "User")
                        .WithMany("HistorySearches")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OneShelf.Common.Database.Songs.Model.Artist", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Synonyms");
                });

            modelBuilder.Entity("OneShelf.Common.Database.Songs.Model.LikeCategory", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("OneShelf.Common.Database.Songs.Model.SameSongGroup", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("OneShelf.Common.Database.Songs.Model.Song", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Content");

                    b.Navigation("Likes");

                    b.Navigation("Messages");

                    b.Navigation("RedirectsFromSongs");

                    b.Navigation("Versions");
                });

            modelBuilder.Entity("OneShelf.Common.Database.Songs.Model.Tenant", b =>
                {
                    b.Navigation("Artists");

                    b.Navigation("LikeCategories");

                    b.Navigation("Messages");

                    b.Navigation("Songs");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("OneShelf.Common.Database.Songs.Model.User", b =>
                {
                    b.Navigation("BillingUsages");

                    b.Navigation("Comments");

                    b.Navigation("HistoryChordsViews");

                    b.Navigation("HistorySearches");

                    b.Navigation("Interactions");

                    b.Navigation("LikeCategories");

                    b.Navigation("Likes");

                    b.Navigation("SongsCreated");

                    b.Navigation("Versions");
                });

            modelBuilder.Entity("OneShelf.Common.Database.Songs.Model.Version", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });
#pragma warning restore 612, 618
        }
    }
}
